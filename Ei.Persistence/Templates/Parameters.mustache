
    #region {{ParameterClassName}}
    public class {{ParameterClassName}}: {{ ParameterParentName }} {
        
        // Properties

        {{#each Properties}}
        public {{Type}} {{Name}} { get; set; }
        {{/each}}

        // Abstract implementation

        public override string Validate() {
            var result = base.Validate();
            if (result != null) {
                return result;
            }
    
            {{#each Validations }}
            if (!({{{.}}})) return "Failed: {{{.}}}";
            {{/each}}
            return null;
        }

        public override void Parse(VariableInstance[] properties) {
            base.Parse(properties);
            foreach (var property in properties) {
                switch (property.Name) {
                    {{#each Properties}}
                    case "{{Name}}":
                        this.{{Name}} = {{Type}}.Parse(property.Value);
                        break;
                    default:
                        throw new Exception("Parameter does not exist: " + property.Name);
                    {{/each}}
                }
            }
        }

        {{#if WorkflowId}}
        public override void CopyTo(Workflow.Store workflowStore) {
            var store = ({{ targetWorkflowClassName WorkflowId }}.Store) workflowStore;

            {{#each Properties}}
            store.{{Name}} = this.{{Name}};
            {{/each}}
        }
        {{/if}}
    }
    #endregion