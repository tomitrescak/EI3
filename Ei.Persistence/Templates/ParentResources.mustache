    #region class Store
    public new class Store : {{ParentClassName}}.Store
    {
        // Fields
        private List<object> defaultValues = new List<object>() {
            {{#each Properties}}
            {{{DefaultValue}}},
            {{/each}}
        };

        // Properties

        {{#each Properties}}
        public {{Type}} {{Name}} { get; set; }
        {{/each}}
       
        // Ctor
        public Store() {
            {{#each Properties}}
            this.{{Name}} = {{{DefaultValue}}};
            {{/each}}
        } 

        // Methods

        public override SearchableState Clone(SearchableState cloneTo = null) {
            var clone = new Store();
            base.Clone(clone);
            
            {{#each Properties}}
            clone.{{Name}} = this.{{Name}};
            {{/each}}

            return clone;
        }

        public override bool Contains(string name) {
            if (base.Contains(name)) return true;
            {{#each Properties}}
            if (name == "{{Name}}") return true;
            {{/each}}
    
            return false; 
        }

        public override List<VariableInstance> FilterByAccess(Governor governor) {
            var list = base.FilterByAccess(governor);
            list.AddRange(new List<VariableInstance> {
                {{#each PublicProperties}}
                new VariableInstance("{{Name}}", this.{{Name}}.ToString()),
                {{/each}}
            });
            return list;
        }

        public override object GetValue(string name) {
            if (base.Contains(name)) {
                return base.GetValue(name);
            } 
            {{#each Properties}}
            if (name == "{{Name}}") return this.{{Name}};
            {{/each}}

            throw new Exception("Key does not exists: " + name);
        }

        public override void SetValue(string name, object value) {
            if (base.Contains(name)) {
                base.SetValue(name, value);
                return;
            }
            {{#each Properties}}
            if (name == "{{Name}}") { this.{{Name}} = ({{Type}}) value; return; }
            {{/each}}

            throw new Exception("Key does not exists: " + name);
        }

        public override void ResetDirty() {
            base.ResetDirty();

            {{#each Properties}}
            this.defaultValues[{{@index}}] = this.{{Name}};
            {{/each}}
        }

        public override GoalState[] ToGoalState() {
            var list = new List<GoalState>();
            list.AddRange(base.ToGoalState());

            {{#each Properties}}
            if ({{#if IsNullable}}this.{{Name}} != null && {{/if}}!this.{{Name}}.Equals(this.defaultValues[{{@index}}])) {
                list.Add(new GoalState("{{Name}}", this.{{Name}}, StateGoalStrategy.Equal));
            }
            {{/each}}
            
            return list.ToArray();
        }
    }
    #endregion
