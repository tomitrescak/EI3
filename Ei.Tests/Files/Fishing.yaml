Name: Fishing
Description: Fishing Example
Roles:
    - Id: fisherman
      Name: Fisherman
      Description: >
        We only need one role of fisherman as they both can do all actions,
        but who does what (rowing / spearing) is decided in the scene protocol
      Properties:
        - Name: FishCount
          Type: int
          DefaultValue: 0
        - Name: ReedCount
          Type: int
          DefaultValue: 0
        - Name: StoneCount
          Type: int
          DefaultValue: 0
        - Name: WoodCount
          Type: int
          DefaultValue: 0
        - Name: AxeCount
          Type: int
          DefaultValue: 0
        - Name: HasSpear
          Type: bool
          DefaultValue: false
        - Name: HasPaddle
          Type: bool
          DefaultValue: false
Organisations:
    - Id: uruk
      Name: Uruk

#####################################################################
# This is the main workflow forming a performative structure
# there is quite a few actions that are accessible from any state
#    these action's input or output is marked as "open""
# fishing workflow is defined below this workflow
#####################################################################

#####################################################################
# A note on Conditions (Pre/Post)
# Each condition has following parameters available:
# i - set of institutional parameters (e.g. i.TimeElapsed)
# w - set of workflow parameters in which the condition is evaluated (e.g. w.AgentCount)
# o - set of organisation parameters related to the organisation agent is playing 
# r - set of agent parameters unique to each agent (r represents agent, r.XYZ is its parameter)
# a - set of action attributes (e.g. a.Count, where action takeFish has attribute Count)
#####################################################################

Workflows:
    - Id: 1
      Name: Main
      Stateless: true
      Static: true
      Start:
        Id: entry
      End:
        - Id: exit
      Actions:
        - !action
          Id: findReed
        - !action
          Id: findStone
        - !action
          Id: findWood
        - !action
          Id: findAxe
        - !action
          Id: makeSpear
        - !action
          Id: makePaddle
        - !workflow
          Id: fishingWorkflow
      States:
      Transitions:
      Connections:
        - Join: [entry,exit]
        - Join: [open,open]
          ActionId: findReed 
          Access:
            - Postconditions:
                - Condition: r.ReedCount ++
        - Join: [open,open]
          ActionId: findStone 
          Access:
            - Postconditions:
                - Condition: r.StoneCount ++
        - Join: [open,open]
          ActionId: findWood 
          Access:
            - Postconditions:
                - Condition: r.WoodCount ++
        - Join: [open,open]
          ActionId: findAxe 
          Access:
            - Postconditions:
                - Condition: r.AxeCount ++
        - Join: [open,open]
          ActionId: makeSpear 
          Access:
            - Precondition: r.ReedCount > 0 && r.StoneCount > 0
            - Postconditions:
                - Condition: >
                    r.ReedCount--;
                    r.StoneCount--;
                    r.HasSpear = true;
        - Join: [open,open]
          ActionId: makePaddle
          Access:
            - Precondition: r.AxeCount > 0 && r.WoodCount > 0
            - Postconditions:
                - Condition: >
                    r.WoodCount--;
                    r.HasPaddle = true;

#####################################################################
# This is the fishing workflow
# It has a form of state diagram
#####################################################################

    - Id: 2
      Name: Fishing
      Stateless: false
      Properties:
        - Name: Rower
          Type: agent
        - Name: Spearer
          Type: agent
        - Name: FishCount
          Type: int
      Start:
        Id: entry
      End:
        - Id: exit
      Actions:
        - !action
          Id: enterBoat
        - !action
          Id: spearFish
        - !action
          Id: takeFish
          Properties:
            - Name: Count
              Type: int
      States:
        - Id: waitForRower
          EntryCondition:
            - Role: fisherman
              Condition: r.HasPaddle == true;
        - Id: waitForSpearer
          EntryCondition:
            - Role: fisherman
              Condition: r.HasSpear == true;
        - Id: fishing
      Transitions:
      Connections:
        - Join: [entry,waitForRower]
          ActionId: enterBoat 
          Access:
            - Role: fisherman
              Precondition: r.HasSpear
              Postconditions:
                - Condition: w.Spearer = r;
        - Join: [entry,waitForSpearer]
          ActionId: enterBoat 
          Access:
            - Role: fisherman
              Precondition: r.HasPaddle
              Postconditions:
                - Condition: w.Rower = r;
        - Join: [waitForRower,fishing]
          ActionId: enterBoat 
          Access:
            - Role: fisherman
              Precondition: r.HasPaddle && a.Spearer != r # Prohibit one agent to perform both actions
              Postconditions:
                - Condition: w.Rower = r;
        - Join: [waitForSpearer,fishing]
          ActionId: enterBoat 
          Access:
            - Role: fisherman
              Precondition: r.HasSpear && a.Rower != r # Prohibit one agent to perform both actions
              Postconditions:
                - Condition: w.Spearer = r;
        - Join: [fish,fish]
          ActionId: spearFish 
          Access:
            - Role: fisherman
              Precondition: r.Spearer == r # Prohibit one agent to perform both actions
              Postconditions:
                - Condition: w.FishCount ++; # We can also use some probabilistic function such as "w.FishCount += Random.int() % 2";
        - Join: [fish,exit]
          ActionId: takefish 
          Access:
            - Role: fisherman
              Precondition: w.Spearer == r && a.Count <= w.FishCount # Spearer decides to take the fish
              Postconditions:
                - Condition: >
                    r.FishCount = a.Count;
                    w.Rower.FishCount = w.FishCount - a.Count;
        - Join: [fish,exit]
          ActionId: takefish 
          Access:
            - Role: fisherman
              Precondition: w.Rower == r && a.Count <= w.FishCount # Spearer decides to take the fish
              Postconditions:
                - Condition: >
                    r.FishCount = a.Count;
                    w.Spearer.FishCount = w.FishCount - a.Count;
InitialWorkflow: 1
Authorisation:
    - User: user
      Password: pass
      Groups:
        - OrganisationId: 1
          RoleId: 1